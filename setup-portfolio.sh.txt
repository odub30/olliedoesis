#!/bin/bash

# Portfolio Website Setup Script
# Creates the essential foundation structure for your Next.js portfolio

set -e  # Exit on any error

echo "🚀 Setting up Portfolio Website Foundation..."
echo "================================================"

# 1. Create project directory and navigate
echo "📁 Creating project directory: C:/olliedoesis"
mkdir -p /c/olliedoesis
cd /c/olliedoesis

echo "✅ Created and navigated to C:/olliedoesis"

# 2. Check if Next.js is already initialized
echo ""
if [ -f "package.json" ]; then
    echo "📦 Next.js project already exists, skipping initialization..."
    echo "✅ Using existing Next.js setup"
else
    echo "⚡ Initializing Next.js project with TypeScript and Tailwind..."
    npx create-next-app@latest . --typescript --tailwind --eslint --app --src-dir --import-alias "@/*"
    echo "✅ Next.js project initialized successfully"
fi

# 3. Create additional required directories
echo ""
echo "📂 Creating additional project structure..."

# Core directories
mkdir -p src/data
mkdir -p src/lib
mkdir -p src/hooks
mkdir -p src/types
mkdir -p src/components/ui
mkdir -p src/components/layout
mkdir -p src/components/sections
mkdir -p src/components/features/github
mkdir -p src/components/features/cms

# Public directories
mkdir -p public/images/projects
mkdir -p public/images/screenshots
mkdir -p public/images/og
mkdir -p public/schemas

# Content directories
mkdir -p content/drafts

echo "✅ Directory structure created"

# 4. Create environment files (only if they don't exist)
echo ""
echo "🔐 Setting up environment configuration..."

# Create .env.example (public template) - only if it doesn't exist
if [ ! -f ".env.example" ]; then
cat > .env.example << 'EOF'
# Portfolio Configuration
NEXT_PUBLIC_SITE_URL=https://yoursite.com
NEXT_PUBLIC_SITE_NAME="Your Name - Portfolio"
NEXT_PUBLIC_GITHUB_USERNAME=your-github-username

# Contact Information
NEXT_PUBLIC_CONTACT_EMAIL=your-email@example.com

# Optional: GitHub API (for enhanced repo data)
# GITHUB_TOKEN=ghp_your_personal_access_token

# Optional: Email Service (for contact form)
# EMAIL_SERVICE_API_KEY=your_email_service_key
# EMAIL_SERVICE_URL=https://api.emailservice.com

# Optional: Analytics
# NEXT_PUBLIC_GA_ID=G-XXXXXXXXXX
EOF
echo "✅ Created .env.example"
else
echo "📄 .env.example already exists, skipping..."
fi

# Create .env.local (private, user will fill this) - only if it doesn't exist
if [ ! -f ".env.local" ]; then
cat > .env.local << 'EOF'
# Private Environment Variables
# Copy from .env.example and fill with your actual values

NEXT_PUBLIC_SITE_URL=http://localhost:3000
NEXT_PUBLIC_SITE_NAME="Your Name - Portfolio"
NEXT_PUBLIC_GITHUB_USERNAME=your-github-username
NEXT_PUBLIC_CONTACT_EMAIL=your-email@example.com

# Add your private keys here (never commit this file)
# GITHUB_TOKEN=
# EMAIL_SERVICE_API_KEY=
EOF
echo "✅ Created .env.local"
else
echo "📄 .env.local already exists, skipping..."
fi

# 5. Update .gitignore to ensure security
echo ""
echo "🔒 Updating .gitignore for security..."

# Add additional security items to .gitignore
cat >> .gitignore << 'EOF'

# Environment variables (additional security)
.env.local
.env.production
.env.development

# IDE and editor files
.vscode/
.idea/
*.swp
*.swo

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Optional: Exclude sensitive content
content/drafts/private/
public/images/private/
EOF

echo "✅ .gitignore updated"

# 6. Create basic configuration files (only if they don't exist)
echo ""
echo "⚙️ Creating configuration files..."

# Create next.config.js with optimization - only if it doesn't exist
if [ ! -f "next.config.js" ] && [ ! -f "next.config.ts" ]; then
cat > next.config.js << 'EOF'
/** @type {import('next').NextConfig} */
const nextConfig = {
  experimental: {
    appDir: true,
  },
  images: {
    domains: ['github.com', 'avatars.githubusercontent.com'],
    formats: ['image/webp', 'image/avif'],
  },
  // Enable static exports for better performance
  output: 'export',
  trailingSlash: true,
  // Security headers
  async headers() {
    return [
      {
        source: '/(.*)',
        headers: [
          {
            key: 'X-Frame-Options',
            value: 'DENY',
          },
          {
            key: 'X-Content-Type-Options',
            value: 'nosniff',
          },
          {
            key: 'Referrer-Policy',
            value: 'origin-when-cross-origin',
          },
        ],
      },
    ];
  },
};

module.exports = nextConfig;
EOF
echo "✅ Created next.config.js"
else
echo "📄 Next.js config already exists, skipping..."
fi

# Update package.json scripts
echo ""
echo "📜 Updating package.json scripts..."

# Create a temporary package.json update
node -e "
const fs = require('fs');
const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
pkg.scripts = {
  ...pkg.scripts,
  'dev': 'next dev',
  'build': 'next build',
  'start': 'next start',
  'lint': 'next lint',
  'lint:fix': 'next lint --fix',
  'type-check': 'tsc --noEmit',
  'clean': 'rm -rf .next out'
};
fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2));
"

echo "✅ Configuration files created"

# 7. Create initial data files (only if they don't exist)
echo ""
echo "📄 Creating initial data structure..."

# Create site configuration - only if it doesn't exist
if [ ! -f "src/data/site-config.ts" ]; then
cat > src/data/site-config.ts << 'EOF'
export const siteConfig = {
  name: "Your Name",
  title: "Your Name - Portfolio",
  description: "A showcase of my web development, networking, and security projects",
  url: process.env.NEXT_PUBLIC_SITE_URL || "http://localhost:3000",
  ogImage: "/og/default.png",
  links: {
    github: "https://github.com/your-username",
    linkedin: "https://linkedin.com/in/your-profile",
    email: "mailto:your-email@example.com",
  },
};

export type SiteConfig = typeof siteConfig;
EOF
echo "✅ Created site-config.ts"
else
echo "📄 site-config.ts already exists, skipping..."
fi

# Create personal info template - only if it doesn't exist
if [ ! -f "src/data/personal-info.ts" ]; then
cat > src/data/personal-info.ts << 'EOF'
export const personalInfo = {
  name: "Your Full Name",
  title: "Web Developer & Security Enthusiast",
  bio: "Passionate about creating secure, performant web applications and exploring cybersecurity concepts.",
  location: "Your City, State",
  email: process.env.NEXT_PUBLIC_CONTACT_EMAIL || "your-email@example.com",
  github: process.env.NEXT_PUBLIC_GITHUB_USERNAME || "your-username",
  
  skills: {
    frontend: ["React", "Next.js", "TypeScript", "Tailwind CSS"],
    backend: ["Node.js", "Express", "PostgreSQL"],
    security: ["Network Security", "Web Security", "Penetration Testing"],
    tools: ["Git", "Docker", "Vercel", "VS Code"],
  },
  
  currentlyLearning: [
    "Advanced React Patterns",
    "Cybersecurity Fundamentals", 
    "Network Administration",
  ],
};

export type PersonalInfo = typeof personalInfo;
EOF
echo "✅ Created personal-info.ts"
else
echo "📄 personal-info.ts already exists, skipping..."
fi

# Create first project file - only if it doesn't exist
if [ ! -f "src/data/projects/portfolio-website.md" ]; then
cat > src/data/projects/portfolio-website.md << 'EOF'
---
title: "Portfolio Website"
description: "A modern, secure portfolio built with Next.js showcasing web development skills"
tech: ["Next.js 14", "TypeScript", "Tailwind CSS", "Framer Motion"]
github: "https://github.com/your-username/portfolio"
live: "https://yoursite.com"
featured: true
status: "in-progress"
date: "2025-09-28"
image: "/images/projects/portfolio-hero.png"
learning_objectives:
  - "Master Next.js App Router architecture"
  - "Implement secure GitHub API integration"
  - "Create responsive, accessible design"
  - "Build automated deployment pipeline"
---

# Portfolio Website Development Journey

## Project Overview

This portfolio serves as both a showcase of my development skills and a comprehensive learning project in modern web development practices. Built with Next.js 14 and TypeScript, it demonstrates proficiency in current industry standards while documenting the entire development process.

## Technical Implementation

### Architecture Decisions
- **Framework**: Next.js 14 with App Router for optimal performance and SEO
- **Type Safety**: Full TypeScript implementation with strict typing
- **Styling**: Tailwind CSS with custom design system
- **Security**: Environment-based API key management and input validation

### Key Features
1. **Dynamic GitHub Integration** - Automatically pulls and displays repository data
2. **Secure Contact Form** - Server-side validation with spam protection
3. **Educational Documentation** - Complete build process with screenshots
4. **Mobile-First Design** - Responsive design optimized for all devices
5. **Answer Engine Optimization** - Structured data for AI search visibility

## Development Process

### Planning Phase
- Comprehensive file structure design
- Security and privacy considerations
- Performance optimization strategy
- Answer Engine Optimization implementation

### Implementation Highlights
- Component-based architecture for maintainability
- Custom hooks for GitHub API integration
- Automated deployment with Vercel
- Progressive enhancement for accessibility

## Learning Outcomes

This project has provided hands-on experience with:
- Modern React patterns and Next.js features
- TypeScript for type-safe development
- API integration and data fetching strategies
- Security best practices for web applications
- Performance optimization techniques

## Future Enhancements

- Simple CMS interface for content management
- Advanced search functionality
- Interactive project demos
- Blog section for technical writing
- Analytics dashboard for portfolio performance

## Screenshots

*Screenshots will be added as development progresses*

---

*This project represents the beginning of my portfolio journey, documenting both technical skills and the learning process itself.*
EOF
echo "✅ Created portfolio-website.md"
else
echo "📄 portfolio-website.md already exists, skipping..."
fi

echo "✅ Initial data files created"

# 8. Initialize Git repository (only if not already initialized)
echo ""
if [ ! -d ".git" ]; then
    echo "🔧 Initializing Git repository..."
    git init
    git add .
    git commit -m "🎉 Initial portfolio setup with Next.js foundation

- Next.js 14 with TypeScript and Tailwind CSS
- Complete project structure for scalable development
- Environment configuration with security best practices
- Initial data structure and project documentation
- Git repository with proper .gitignore"
    echo "✅ Git repository initialized with initial commit"
else
    echo "📁 Git repository already exists, skipping initialization..."
    echo "💡 You can manually commit new changes with:"
    echo "   git add ."
    echo "   git commit -m 'Add portfolio structure and configuration'"
fi

# 9. Display completion summary
echo ""
echo "🎉 PORTFOLIO SETUP COMPLETE!"
echo "================================================"
echo ""
echo "📁 Project Location: C:/olliedoesis"
echo "🌐 Framework: Next.js 14 with TypeScript"
echo "🎨 Styling: Tailwind CSS"
echo "📝 Content: Markdown-based project system"
echo ""
echo "🔧 NEXT STEPS:"
echo "1. cd C:/olliedoesis"
echo "2. Update .env.local with your actual information"
echo "3. Update src/data/personal-info.ts with your details"
echo "4. Run 'npm run dev' to start development server"
echo "5. Visit http://localhost:3000 to see your portfolio"
echo ""
echo "📚 PHASE 2 ADDITIONS (when needed):"
echo "• .github/workflows/ - For automated deployment"
echo "• Additional components - As you build features"
echo "• public/images/ - When you have project images"
echo "• public/schemas/ - For structured data implementation"
echo ""
echo "🔒 SECURITY REMINDER:"
echo "• Never commit .env.local to Git"
echo "• Add your GitHub token only when ready for API integration"
echo "• Review .gitignore before adding sensitive files"
echo ""
echo "Happy coding! 🚀"